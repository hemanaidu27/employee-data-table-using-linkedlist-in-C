#include <stdio.h>
#include <curses.h>
#include <stdlib.h>
#include <string.h>
struct employee
{
	int  id;
	char name[51];
	char designation[51];
	char expertise[51];
	char joiningdate[51];    
	struct employee *next;

};

void addEmployee(struct employee **HeadofList)
{

	struct employee *ptr;
	ptr=*HeadofList;
     
	if(ptr == NULL)
	{	ptr = (struct employee*) malloc(sizeof(struct employee));
		printf("\nEnter the employee number: ");
		scanf("%d",&(ptr->id));
		printf("\nEntr the employee name :");
		scanf("%s", ptr->name);
		printf("\nEnter the employee designation :");
		scanf("%s", ptr->designation);
		printf("\nEnter the employee expertise :");
		scanf("%s", ptr->expertise);
		printf("\nEnter the employee joiningdate :");
		scanf("%s",ptr->joiningdate);
		ptr->next=NULL;
		*HeadofList = ptr;
	}
	else 
	{
		while(ptr->next!=NULL)
		{
		ptr=ptr->next;
		}
	    ptr->next= (struct employee*) malloc(sizeof(struct employee));
		ptr=ptr->next;
		printf("\nEnter the employee number :");
		scanf("%d",&ptr->id);
		printf("\nEnter the employee name 3:");
		scanf("%s", ptr->name);
		printf("\nEnter the employee designation :");
		scanf("%s", ptr->designation);
		printf("\nEnter the employee expertise :");
		scanf("%s",  ptr->expertise);
		printf("\nEnter the employee joinigdate :");
		scanf("%s",ptr->joiningdate);
		ptr->next=NULL;
	}
}

void printNode(struct employee  *p)

{
	printf( "\n.........Employee Details.....\n");
	printf( " Emp No --> %d   :    \n", p->id);
	printf( " Name -->     %s      :\n",  p->name);
	printf( " Designation --> %s :\n " , p->designation);
	printf( " Expertise -->   %s :\n  ", p->expertise);
	printf( " joiningdate -->  %s :\n ", p->joiningdate);
	printf( "..............................\n"); 
}
void   removeEmployee(struct employee  **HeadofList)
{
	int id;
	struct employee *ptr;
	struct employee *Head;
	struct employee *bptr;
	Head=*HeadofList;

	if(Head==NULL)
	{
		printf("List is empty\n");
		return;
	}
	printf(" Enter the employee number to be deleted: ");
	scanf("%d", &id);

	if (Head->id == id)
	{
		ptr = Head;
		printf( " Node deleted:");
		printNode(Head);
		Head = Head ->next;
		free(ptr);
	}
	for (ptr = Head->next, bptr = Head; ptr != NULL; ptr = ptr->next,
			bptr = bptr->next)
	{
		if (ptr->id == id)
		{
			printf(" Node deleted:");
			printNode(ptr);
			bptr->next = ptr->next;
			free(ptr);
		}
	}
	printf(" Employee Number %d not found ",id);
}
void findEmployee(struct employee **HeadofList)
{
	int key;
	struct employee *ptr;
	struct employee *find;
	find = *HeadofList;
	ptr= find;

	printf( " Enter the employee number to be found: ");
	scanf("%d", &key);
	for (ptr = find; ptr != NULL; ptr = ptr -> next)
	{
		if (ptr->id == key)
		{
			printf("Key found:");
			printNode(ptr);
			return;
		}
	}
	printf("Employee Number %d  not found ",key);
}

void displayList(struct employee  *HeadofList)
{
	struct employee *display;
	display=HeadofList;

	if (display == NULL)
		printf("List	Empty");
        printf("%p", display);
	while(display->next!=NULL)

	{
		printNode(display);
		display=display->next;
	}
	printNode(display);

}
int  option()
{
	int choice;  
	printf("\n Press 1 to INSERT a node into the list\n");
	printf(" Press 2 to DELETE a node from the list\n");
	printf(" press 3 to DISPLAY the list\n");
	printf(" Press 4 to SEARCH the list\n");
	printf(" Press 5 to EXIT...\n");
	printf(" \nEnter your choice: ");
	scanf("%d", &choice);
	return choice;
}
void main()
{
	struct employee *employeeList = NULL;
	int choice;
	printf(" Welcome to ebytelogic!\n");
	do
	{
		choice = option();
		switch(choice)
		{
			case 1:
				addEmployee(&employeeList);
				break;
			case 2:
				removeEmployee(&employeeList);
				break;
			case 3:
				displayList(employeeList);
				break;	    
			case 4:
				findEmployee(&employeeList);
				break;
			case 5:
				return;
			default :
				printf("Invalid choice.");
		}
	}  while (1);
}
